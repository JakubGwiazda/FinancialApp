// <auto-generated />
using System;
using CryptoInfo.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinancialApp.Infrastructure.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20250403203011_AddIndexes")]
    partial class AddIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinancialApp.Domain.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("FinancialApp.Domain.CryptoData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceChange")
                        .HasColumnType("double precision");

                    b.Property<int>("TrackedCryptocurrencyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreateDate")
                        .HasDatabaseName("IX_CryptoData_CreateDate");

                    b.HasIndex("TrackedCryptocurrencyId", "CreateDate")
                        .HasDatabaseName("IX_CryptoData_TrackedCryptoId_CreateDate");

                    b.ToTable("CryptoData");
                });

            modelBuilder.Entity("FinancialApp.Domain.TrackedCryptocurrencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CollectData")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceCurrencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrackedCryptocurrencies");
                });

            modelBuilder.Entity("FinancialApp.Domain.CryptoData", b =>
                {
                    b.HasOne("FinancialApp.Domain.TrackedCryptocurrencies", "TrackedCryptocurrency")
                        .WithMany("CryptoData")
                        .HasForeignKey("TrackedCryptocurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedCryptocurrency");
                });

            modelBuilder.Entity("FinancialApp.Domain.TrackedCryptocurrencies", b =>
                {
                    b.Navigation("CryptoData");
                });
#pragma warning restore 612, 618
        }
    }
}
