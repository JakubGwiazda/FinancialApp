version: '3.8'

services:
  traefik:  
    image: traefik:latest
    container_name: traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--log.level=INFO"
      - "--providers.file.directory=/dynamic"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
    ports:
      - "443:443"
    volumes:
      - "/home/certs:/home/certs"
      - "/home/traefik-dynamic/:/dynamic"  
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - financial-app-net

  rabbitmq: 
    image: rabbitmq:4-management
    hostname: "rabbitmq"
    labels:
      NAME: "rabbitmq"
    networks:
      - financial-app-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  financial-db:
    image: postgres:latest
    container_name: financial-db
    restart: always
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${FINANCIAL_DB_PASSWORD}
      POSTGRES_DB: FinancialDb
    volumes:
      - financial_db_data:/var/lib/postgresql/data
    networks:
      - financial-app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d FinancialDb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  notification-db:
    image: postgres:latest
    container_name: notification-db
    restart: always
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      POSTGRES_DB: NotificationDB
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    networks:
      - financial-app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d NotificationDB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  authorization-db:
    image: postgres:latest
    container_name: authorization-db
    restart: always
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${AUTHORIZATION_DB_PASSWORD}
      POSTGRES_DB: AuthorizationDB
    volumes:
      - authorization_db_data:/var/lib/postgresql/data
    networks:
      - financial-app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d AuthorizationDB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  authorization-service:
    image: aertis/authorization-service
    container_name: authorization-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:5233
    volumes:
      - /app/logs
    networks:
      - financial-app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authorization-service.rule=PathPrefix(`/authorization`)"
      - "traefik.http.routers.authorization-service.entrypoints=websecure"
      - "traefik.http.routers.authorization-service.tls=true"
      - "traefik.http.services.authorization-service.loadbalancer.server.port=5233"
      - "traefik.http.routers.authorization-service.middlewares=cors"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Methods=*"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Headers=*"
    depends_on:
      authorization-db:
        condition: service_healthy

  financial-app:
    image: aertis/financial-app
    container_name: financial-app
    environment:
      - RABBITMQ_HOST=rabbitmq
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:5113
      - DB_USER
      - DB_PASSWORD
    volumes:
      - /app/logs
    networks:
      - financial-app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.financial-app.rule=PathPrefix(`/financial`)"
      - "traefik.http.routers.financial-app.entrypoints=websecure"
      - "traefik.http.routers.financial-app.tls=true"
      - "traefik.http.services.financial-app.loadbalancer.server.port=5113"
      - "traefik.http.routers.financial-app.middlewares=cors"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Methods=*"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Headers=*" 
    depends_on:
      rabbitmq:
        condition: service_healthy
      financial-db:
        condition: service_healthy

  notification-service:
    image: aertis/notification-service
    container_name: notification-service
    environment:
      - RABBITMQ_HOST=rabbitmq
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:5102
    volumes:
      - /app/logs
    networks:
      - financial-app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-service.rule=PathPrefix(`/notification`)"
      - "traefik.http.routers.notification-service.entrypoints=websecure"
      - "traefik.http.routers.notification-service.tls=true"
      - "traefik.http.services.notification-service.loadbalancer.server.port=5102"
      - "traefik.http.routers.notification-service.middlewares=cors"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Methods=*"
      - "traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Headers=*"   
    depends_on:
      rabbitmq:
        condition: service_healthy
      notification-db:
        condition: service_healthy

networks:
  financial-app-net:
    driver: bridge

volumes:
  financial_db_data:
  notification_db_data:
  authorization_db_data:  
